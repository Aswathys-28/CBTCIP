# -*- coding: utf-8 -*-
"""Spam Email Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CxE1gYaAkkqh8CGAeQ6yp44onAyh45J5

**Email Spam Detection with Machine Learning**


---


*Data Science Project*
"""

#Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import classification_report

# Load the dataset
df = pd.read_csv('mail_data.csv')

# Display the first few rows of the dataset
df.head(10)

rows, columns = df.shape
print(f"Number of rows are: {rows}")
print(f"Number of columns are: {columns}")

df.info()

# Dataset Duplicate Value Count
dup = df.duplicated().sum()
print(f'number of duplicated rows are {dup}')

# Missing Values/Null Values Count
df.isnull().sum()

# Calculate the distribution
spread = df['Category'].value_counts()

# Set up the figure
plt.figure(figsize=(5, 5))

# Plot the pie chart
spread.plot(kind='pie', autopct='%1.2f%%', labels=['Ham', 'Spam'], colors=['green', 'red'], startangle=90, explode=(0.1, 0))

# Add title
plt.title('Distribution of Spam vs Ham')

# Display the chart
plt.show()

# Convert 'spam' and 'ham' to binary labels
df['Category'] = df['Category'].map({'spam': 0, 'ham': 1})

# Split the data into features (X) and target (Y)
X, Y = df["Message"], df["Category"]

# Split the data into training and test sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.35, random_state=3)

# Display the shapes of the split datasets
print(f"Training Set Size: {X_train.shape[0]}, Test Set Size: {X_test.shape[0]}")

# TF-IDF feature extraction
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Convert target variables to integers
Y_train = Y_train.astype(int)
Y_test = Y_test.astype(int)

# Model training
model = LogisticRegression()
model.fit(X_train_features, Y_train)

# Model evaluation
pred_on_training_data = model.predict(X_train_features)
acc_on_training_data = accuracy_score(Y_train, pred_on_training_data)

pred_on_test_data = model.predict(X_test_features)
acc_on_test_data = accuracy_score(Y_test, pred_on_test_data)

# Print accuracy
print('Accuracy on training data: {} %'.format(acc_on_training_data * 100))
print('Accuracy on test data: {} %'.format(acc_on_test_data * 100))

# Confusion Matrix Visualization
confu_matrix = confusion_matrix(Y_train, pred_on_training_data)
plt.figure(figsize=(6, 6))
sns.heatmap(confu_matrix, annot=True, fmt="d", cmap="Reds", cbar=False,
            xticklabels=['Spam', 'Ham'], yticklabels=['Spam', 'Ham'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Train Confusion Matrix')
plt.show()

# Confusion Matrix Visualization
confu_matrix = confusion_matrix(Y_test, pred_on_test_data)
plt.figure(figsize=(6, 6))
sns.heatmap(confu_matrix, annot=True, fmt="d", cmap="Reds", cbar=False,
            xticklabels=['Spam', 'Ham'], yticklabels=['Spam', 'Ham'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Test Confusion Matrix')
plt.show()

# Classification report
classification_rep = classification_report(Y_test, prediction_on_test_data,target_names=['Spam', 'Ham'])
print("Classification Report:")
print(classification_rep)

# Metrics calculation
TP = confu_matrix[1, 1]
TN = confu_matrix[0, 0]
FP = confu_matrix[0, 1]
FN = confu_matrix[1, 0]

accuracy = (TP + TN) / (TP + TN + FP + FN)
precision = TP / (TP + FP)
recall = TP / (TP + FN)
specificity = TN / (TN + FP)

print("Accuracy : ",accuracy)
print("Precision : ",precision)
print("Recall : ",recall)
print("Specificity : ",specificity)

# Make predictions on new input

input_mail ="You are a winner U have been specially selected 2 receive ï¿½1000 cash or a 4* holiday (flights inc) speak to a live operator 2 claim 0871277810810"
input_data_features = feature_extraction.transform([input_mail])
prediction = model.predict(input_data_features)
if prediction[0] == 1:
    print("Ham Mail")
else:
    print("Spam Mail")

# Make predictions on new input

input_mail ="As per your request 'Melle Melle (Oru Minnaminunginte Nurungu Vettam)' has been set as your callertune for all Callers. Press *9 to copy your friends Callertune"
input_data_features = feature_extraction.transform([input_mail])
prediction = model.predict(input_data_features)
if prediction[0] == 1:
    print("Ham Mail")
else:
    print("Spam Mail")